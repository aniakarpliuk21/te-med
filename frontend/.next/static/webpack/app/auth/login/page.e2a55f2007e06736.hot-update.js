"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/auth/login/page",{

/***/ "(app-pages-browser)/./src/services/auth.service.ts":
/*!**************************************!*\
  !*** ./src/services/auth.service.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   authService: () => (/* binding */ authService),\n/* harmony export */   fetchWithAuth: () => (/* binding */ fetchWithAuth)\n/* harmony export */ });\n/* harmony import */ var _urls_urls__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/urls/urls */ \"(app-pages-browser)/./src/urls/urls.ts\");\n\nconst authService = {\n    register: async (userData)=>{\n        const response = await fetch(\"\".concat(_urls_urls__WEBPACK_IMPORTED_MODULE_0__.urls.authRegisterUrl), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(userData)\n        });\n        const text = await response.text();\n        if (!response.ok) {\n            throw new Error(\"Registration failed: \".concat(response.status, \" - \").concat(text));\n        }\n        return JSON.parse(text);\n    },\n    login: async (credentials)=>{\n        const response = await fetch(\"\".concat(_urls_urls__WEBPACK_IMPORTED_MODULE_0__.urls.authLoginUrl), {\n            method: \"POST\",\n            headers: {\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                email: credentials.email,\n                password: credentials.password\n            })\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            throw new Error(\"Login failed: \".concat(response.status, \" - \").concat(errorText));\n        }\n        const data = await response.json();\n        localStorage.setItem(\"userId\", data.user._id);\n        return data;\n    },\n    refreshToken: async ()=>{\n        const refreshToken = localStorage.getItem(\"refresh_token\");\n        try {\n            const refreshResponse = await fetch(\"\".concat(_urls_urls__WEBPACK_IMPORTED_MODULE_0__.urls.authRefreshUrl), {\n                method: \"POST\",\n                credentials: \"include\"\n            });\n            if (!refreshResponse.ok) {\n                console.error(\"Помилка оновлення токена\", await refreshResponse.text());\n                throw new Error(\"Failed to refresh token\");\n            }\n            const data = await refreshResponse.json();\n            localStorage.setItem(\"access_token\", data.accessToken);\n            return data.accessToken;\n        } catch (error) {\n            console.error(\"Token update error:\", error);\n            throw error;\n        }\n    }\n};\nconst fetchWithAuth = async function(url) {\n    let options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};\n    let token = localStorage.getItem(\"accessToken\");\n    const headers = {\n        ...options.headers,\n        Authorization: \"Bearer \".concat(token)\n    };\n    const updatedOptions = {\n        ...options,\n        headers\n    };\n    let res = await fetch(url, updatedOptions);\n    if (res.status === 401) {\n        token = await authService.refreshToken();\n        if (!token) {\n            throw new Error(\"Failed to refresh token\");\n        }\n        updatedOptions.headers = {\n            ...headers,\n            Authorization: \"Bearer \".concat(token)\n        };\n        res = await fetch(url, updatedOptions);\n    }\n    if (!res.ok) {\n        throw new Error(\"Error: \".concat(res.status));\n    }\n    return res.json();\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/services/auth.service.ts\n"));

/***/ })

});